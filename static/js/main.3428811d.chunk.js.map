{"version":3,"sources":["components/Nav.js","components/Photos.js","components/CreatePost.js","components/Comment.js","components/Post.js","components/PostsPage.js","images/login-img.jpg","images/skulls.png","components/Test.js","components/LoginPage.js","components/Friends.js","components/Wall.js","components/LogoutPage.js","App.js","reportWebVitals.js","index.js"],"names":["makeStyles","nav","position","height","overflowX","top","left","zIndex","borderRight","padding","backgroundColor","width","navHeading","marginTop","navBtn","border","borderRadius","margin","justifyContent","transition","transitionDuration","color","navIcon","marginRight","right","transform","navBtnList","paddingRight","logoutBtn","menuBtn","textAlign","cursor","fontSize","navImg","navBtnText","fontFamily","fontWeight","input","submitBtn","textBox","postContent","join","overflowWrap","avatar","name","alignSelf","profileInfo","display","contentBox","marginBottom","commentHolder","marginLeft","delIcon","date","whiteSpace","JSON","parse","localStorage","getItem","postsTitle","Post","Test","image1","backgroundImage","image","backgroundPosition","backgroundSize","backgroundRepeat","opacity","loginPaper","maxWidth","alignItems","btn","subtitle","grid","overlay","skulls","mixBlendMode","imgText","imgTextMiddle","imgTextLower","bottom","sloganContainer","box","paddingTop","profilePic","email","bg","tabs","tab","paper","img","logoutBox","theme","createTheme","typography","body1","App","useState","setFriendsList","setUsersPosts","setUsersComments","setUsersPhotos","useEffect","getUsers","axios","get","getPosts","getComments","getPhotos","all","then","spread","allDataPosts","allDataComments","allDataPhotos","data","reverse","fetchData","ThemeProvider","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3428811d.chunk.js","sourcesContent":["import React, {useState} from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Typography, List, ListItem, Avatar} from \"@material-ui/core\"\r\nimport { makeStyles } from \"@material-ui/core/styles\"\r\nimport MenuTwoToneIcon from '@material-ui/icons/MenuTwoTone';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    nav:{\r\n    position: \"fixed\",\r\n    height: \"100vh\",\r\n    overflowX: \"hidden\",\r\n    top: \"0\",\r\n    left: \"0\",\r\n    zIndex: \"100\",\r\n    borderRight: \"2px solid dodgerblue\",\r\n    padding: \"0 10px\",\r\n    backgroundColor: \"aliceblue\",\r\n    width: \"225px\",\r\n    },\r\n\r\n    navHeading:{\r\n        marginTop: \"50px\"\r\n    },\r\n\r\n    navBtn:\r\n    {\r\n        border: \"2px solid dodgerblue\",\r\n        borderRadius: \"10px\",\r\n        padding: \"15px\",\r\n        margin: \"5px 10px 5px 5px\",\r\n        justifyContent: \"space-between\",\r\n        \"&:hover\" : {\r\n        backgroundColor: \"dodgerblue\",\r\n        transition: \"ease-in\",\r\n        transitionDuration: \"150ms\",\r\n        color: \"white\",\r\n        \r\n       \r\n        }\r\n    },\r\n     navIcon : {\r\n      width: \"25px\",\r\n      height: \"25px\",\r\n      position: \"absolute\",\r\n      marginRight: \"5px\",\r\n      right: \"0\",\r\n      top: \"50%\",\r\n      transform: \"translateY(-50%)\",\r\n      backgroundColor: \"white\",\r\n      borderRadius: \"50%\",\r\n      padding: \"5px\"\r\n    },\r\n\r\n    navBtnList:{\r\n        paddingRight: \"10px\"\r\n    },\r\n\r\n    logoutBtn:{\r\n        marginTop: \"50vh\"\r\n    },\r\n    menuBtn:{\r\n        textAlign:\"left\",\r\n        cursor: \"pointer\",\r\n        position: \"fixed\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        zIndex: \"101\",\r\n        fontSize:\"40px\",\r\n        \r\n    },\r\n    navImg:{\r\n        margin: \"auto\"\r\n    },\r\n\r\n    navBtnText:{\r\n        fontFamily: \"Roboto\",\r\n        fontWeight: \"600\"\r\n    }\r\n\r\n  })\r\n\r\nconst Nav = () => {\r\n\r\n   const classes = useStyles();\r\n\r\n const currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n\r\n \r\nconst [isMenuVisible, setMenuVisible] = useState(true)\r\n\r\nconst hideShowMenu = () =>{\r\n\r\n    if(isMenuVisible == true){\r\n        setMenuVisible(false);\r\n    }\r\n    else if(isMenuVisible ==false){\r\n        setMenuVisible(true);\r\n    }\r\n    \r\n}\r\n\r\n\r\n    return(\r\n        <div>\r\n\r\n        \r\n<MenuTwoToneIcon className={classes.menuBtn} onClick={hideShowMenu}/>\r\n        <div style={{display: isMenuVisible ? \"inline-block\" : \"none\"}} className={classes.nav}>\r\n       \r\n        <Typography variant=\"h2\" className={classes.navHeading} >So-Me</Typography>\r\n        <Avatar className={classes.navImg} src={currentUser.picture.medium} alt=\"\"/>\r\n        <Typography variant=\"subtitle1\">{currentUser.login.username}</Typography>\r\n        \r\n            <List className={classes.navBtnList}>\r\n                \r\n                  \r\n              \r\n            <Link to=\"/friends\" style={{ textDecoration: 'none', color:\"dodgerblue\"}} >\r\n            <ListItem className={classes.navBtn}> \r\n           <Typography className={classes.navBtnText}>Friends </Typography>  <i className=\"fas fa-user-friends\"></i>\r\n            </ListItem>\r\n            </Link>\r\n            <Link to=\"/posts\" style={{ textDecoration: 'none', color:\"dodgerblue\" }}>   \r\n            <ListItem className={classes.navBtn}>  \r\n            <Typography className={classes.navBtnText}>Posts </Typography> <i className=\"far fa-newspaper\"></i>\r\n            </ListItem>\r\n            </Link>\r\n            <Link to =\"/photos\" style={{ textDecoration: 'none', color:\"dodgerblue\" }}>\r\n            <ListItem className={classes.navBtn}>\r\n          <Typography className={classes.navBtnText}> Photos </Typography> <i className=\"fas fa-images\"></i>\r\n            </ListItem>\r\n            </Link>\r\n           <Link to=\"/logout\" style={{ textDecoration: 'none', color:\"dodgerblue\" }}>\r\n           <ListItem className={classes.navBtn} style={{marginTop: \"50vh\" }}> \r\n           <Typography className={classes.navBtnText}> Logout </Typography> <i className=\"fas fa-sign-out-alt\"></i>\r\n           </ListItem>\r\n           </Link>\r\n            </List>\r\n            </div>\r\n            </div>\r\n    )\r\n}\r\n\r\nexport default Nav;","import React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Axios from \"axios\"\r\nimport { Image } from \"cloudinary-react\"; \r\nimport Nav from \"../components/Nav\"\r\nimport {Typography, ImageList, ImageListItem, Box, Button, Card} from \"@material-ui/core\"\r\n\r\n\r\nconst useStyles = makeStyles({\r\n  input:{\r\n    \r\n    margin: \"auto\",\r\n    padding: \"10px\",\r\n    borderRadius: \"10px\",\r\n    fontFamily: \"Roboto, cursive\"\r\n  }\r\n  \r\n  })\r\n\r\n\r\nconst Photos = ({addPhoto, photos, usersPhotos}) => {\r\n\r\n  const currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n\r\nconst classes= useStyles();\r\n\r\nconst [imageSelected, setImageSelected] = useState(\"\");\r\nconst [imageURLs, setImageURLs]= useState([]);\r\nconst [photo, setPhoto] = useState(\"\");\r\nconst [itemData, setItemData] = useState(\"\")\r\n\r\n\r\n\r\n// const addURL = (newURL) =>{\r\n//     setImageURLs( prevURLs =>{\r\n//       return [...prevURLs, newURL];\r\n//     } )\r\n// }\r\n\r\nconst uploadImage = (e) =>{\r\n  const formData = new FormData()\r\n    formData.append(\"file\", imageSelected)\r\n    formData.append(\"upload_preset\", \"iq5xsc7g\")\r\n\r\n    Axios.post(\"https://api.cloudinary.com/v1_1/dly13wqwx/image/upload\", formData).then((response)=>{\r\n      \r\n      const photoURL = response.data.url;\r\n      const photoId = response.data.asset_id;\r\n      const newPhoto = {\r\n          imageId: photoId,\r\n          imageURL: photoURL,\r\n          photoUploader: currentUser.login.username\r\n        };\r\n      \r\n     \r\n      addPhoto(newPhoto);\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n        <Nav/>\r\n            <Typography variant=\"h2\">Photos</Typography>\r\n        \r\n\r\n        \r\n            \r\n      \r\n    <input className={classes.input} type=\"file\" onChange={((event)=>{\r\n  setImageSelected(event.target.files[0]);\r\n})} />\r\n\r\n<Button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={uploadImage}>Upload image</Button>\r\n\r\n<Box sx={{ width: 800, height: 900, overflowY: 'scroll', margin:\"auto\" }}>\r\n\r\n      <ImageList variant=\"masonry\" cols={3} gap={10}>\r\n        {photos.map((item) => (\r\n          <ImageListItem key={item.imageId} id={item.imageId}>\r\n            <img\r\n              src={`${item.imageURL}?w=248&fit=crop&auto=format`}\r\n              srcSet={`${item.ImageURL}?w=248&fit=crop&auto=format&dpr=2 2x`}\r\n              alt={item}\r\n              loading=\"lazy\"\r\n            />\r\n          </ImageListItem>\r\n        ))};\r\n\r\n        {usersPhotos.filter((userPhoto)=>{\r\n          if(userPhoto.photoUploader === currentUser.login.username)\r\n          return userPhoto;\r\n        \r\n        }).map((item) => (\r\n          <ImageListItem key={item.imageId} id={item.imageId}>\r\n            <img\r\n              src={`${item.imageURL}?w=248&fit=crop&auto=format`}\r\n              srcSet={`${item.ImageURL}?w=248&fit=crop&auto=format&dpr=2 2x`}\r\n              alt={item}\r\n              loading=\"lazy\"\r\n            />\r\n          </ImageListItem>\r\n        ))}\r\n      </ImageList>\r\n     \r\n    </Box>\r\n\r\n  \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Photos;","import React, {useState} from \"react\";\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport { Button, TextField } from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\n\r\nconst useStyles = makeStyles({\r\n    submitBtn:{\r\n        margin: \"25px\",\r\n        backgroundColor: \"dodgerblue\"\r\n    },\r\n    textBox:{\r\n        backgroundColor:\"aliceblue\",\r\n    \r\n      }\r\n})\r\n\r\n\r\nfunction CreatePost (props) {\r\n\r\nconst classes = useStyles()\r\n\r\nconst currentDate = new Date().toLocaleString();\r\n \r\n//set key id to empty string in post object\r\n\r\n\r\n\r\n\r\n    const [post, setPost] = useState({\r\n        id: uuidv4(),\r\n        title: \"\",\r\n        content: \"\",\r\n        posterUsername: props.posterUsername,\r\n        avatar: props.avatar,\r\n        timestamp: currentDate\r\n    })\r\n\r\n\r\n  // When submit post button is clicked, call the onAdd function and prevent refresh. The value of content is also cleared\r\n  function submitPost(e){\r\n    props.onAdd(post);\r\n    e.preventDefault();\r\n    setPost({\r\n        id: uuidv4(),\r\n        title: \"\",\r\n        content: \"\",\r\n        posterUsername: props.posterUsername,\r\n        avatar: props.avatar,\r\n        timestamp: currentDate\r\n    });\r\n}\r\n\r\n\r\n  //get name and value of the event and then update \"content\" value in post state\r\n\r\n    function handleChange (event) {\r\n        const {name, value} = event.target;\r\n          setPost(prevPost => {\r\n           \r\n            return{\r\n                ...prevPost,\r\n                [name]:value\r\n            };\r\n        }); \r\n    }\r\n\r\n  \r\n\r\n    return(\r\n        <div>\r\n            <form action=\"\">\r\n            <TextField\r\n                fullWidth\r\n                placeholder= \"Enter post title\" \r\n                name=\"title\"\r\n                value={post.title} \r\n                onChange={handleChange}\r\n                id=\"filled-textarea\"\r\n                variant=\"filled\"\r\n                label=\"Title\"\r\n                className={classes.textBox}\r\n                \r\n                />\r\n                \r\n               \r\n                <TextField\r\n                fullWidth\r\n                placeholder= \"Enter post content\" \r\n                name=\"content\"\r\n                value={post.content} \r\n                onChange={handleChange}\r\n                id=\"filled-textarea\"\r\n                multiline\r\n                variant=\"filled\"\r\n                label=\"Content\"\r\n                className={classes.textBox}\r\n                \r\n                />\r\n                <Button className={classes.submitBtn} color=\"primary\" variant=\"contained\" size=\"medium\" name=\"submit-post\" type=\"submit\" onClick={submitPost}>Submit post</Button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePost;","import React from \"react\";\r\nimport { FcLike, FcFullTrash, FcLikePlaceholder} from \"react-icons/fc\";\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport { Paper, Button, Typography, Avatar } from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport { MdDeleteForever} from \"react-icons/md\";\r\n\r\nconst useStyles = makeStyles({\r\n    postContent:{\r\n     fontFamily: ['Roboto','sans-serif'].join(),\r\n     fontWeight: \"600\",\r\n     overflowWrap: \"break-word\"\r\n    },\r\n\r\n    avatar:{\r\n      zIndex: \"10\"\r\n    },\r\n\r\n    name:{\r\n      backgroundColor: \"dodgerblue\",\r\n      borderRadius: \"0 10px 10px 0\",\r\n      padding: \"3px 25px 3px 25px\",\r\n      alignSelf: \"center\",\r\n      color: \"white\",\r\n      left: \"20px\",\r\n      position: \"absolute\",\r\n      zIndex: \"9\"\r\n    },\r\n\r\n    profileInfo:{\r\n      display:\"flex\",\r\n      position: \"relative\",\r\n      top: \"20px\"\r\n    },\r\n\r\n    contentBox:{\r\n      padding: \"30px\",\r\n      textAlign: \"justify\",\r\n      marginBottom: \"20px\",\r\n      position: \"relative\"\r\n    },\r\n\r\n    commentHolder:{\r\n      width: \"90%\",\r\n      marginLeft: \"auto\"\r\n    },\r\n    delIcon:{\r\n      top: \"0\",\r\n      right: \"0\",\r\n      position: \"absolute\",\r\n      transform: \"translateY(-50%)\"\r\n     },\r\n     date:{\r\n      top: \"100%\",\r\n    left: \"80%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    color: \"white\",\r\n    display: \"inline\",\r\n    padding: \"8px\",\r\n    position: \"absolute\",\r\n    borderRadius: \"10px\",\r\n    backgroundColor: \"darkcyan\",\r\n    whiteSpace: \"nowrap\",\r\n    },\r\n\r\n\r\n}) \r\n\r\nconst Comment = (props) => {\r\n\r\nconst currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n\r\n\r\n  const classes = useStyles()\r\n\r\n    function handleClick(){\r\n     console.log(props.id)\r\n        props.onDelete(props.id, props.commentBelongsTo);\r\n}\r\nreturn(\r\n  <div className={classes.commentHolder}>\r\n  <div className={classes.profileInfo}>\r\n  <Avatar className={classes.avatar} src={props.commentAvatar} alt=\"\"/>\r\n  <Typography className={classes.name} variant=\"h5\">{props.commentPostedBy}</Typography>\r\n  </div>\r\n <Paper className={classes.contentBox} elevation ={12}>\r\n {currentUser.login.username === props.commentPostedBy ? <TiDelete className={classes.delIcon} style={{cursor: \"pointer\", fontSize: \"40px\", color:\"#bd1604\"}} onClick={handleClick}/> : null}\r\n  <p className={classes.postContent}>{props.content}</p>\r\n  <Typography className={classes.date}>{props.commentTimestamp}</Typography>\r\n </Paper>\r\n </div>\r\n)\r\n}\r\n\r\nexport default Comment;","import React,{useState}  from \"react\";\r\nimport { AiFillLike } from \"react-icons/ai\";\r\nimport { TiDelete } from \"react-icons/ti\";\r\nimport CreateComment from \"../components/CreateComment\";\r\nimport Comment from \"../components/Comment.js\";\r\nimport { Paper, Button, Typography, Avatar, Box } from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\n\r\nconst currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    postContent:{\r\n     fontFamily: ['Roboto','sans-serif'].join(),\r\n     fontWeight: \"600\",\r\n     overflowWrap: \"break-word\"\r\n    },\r\n\r\n    avatar:{\r\n      zIndex: \"10\"\r\n    },\r\n\r\n    date:{\r\n      top: \"100%\",\r\n    left: \"80%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    color: \"white\",\r\n    display: \"inline\",\r\n    padding: \"8px\",\r\n    position: \"absolute\",\r\n    borderRadius: \"10px\",\r\n    backgroundColor: \"darkcyan\",\r\n    whiteSpace: \"nowrap\",\r\n    fontFamily: \"Roboto\"\r\n    },\r\n\r\n    name:{\r\n      backgroundColor: \"dodgerblue\",\r\n      borderRadius: \"0 10px 10px 0\",\r\n      padding: \"3px 25px 3px 25px\",\r\n      alignSelf: \"center\",\r\n      color: \"white\",\r\n      left: \"20px\",\r\n      position: \"absolute\",\r\n      zIndex: \"9\"\r\n    },\r\n\r\n    profileInfo:{\r\n      display:\"flex\",\r\n      position: \"relative\",\r\n      top: \"20px\"\r\n    },\r\n\r\n    contentBox:{\r\n      padding: \"30px\",\r\n      textAlign: \"justify\",\r\n      marginBottom: \"20px\",\r\n      position: \"relative\"\r\n    },\r\n    delIcon:{\r\n     top: \"0\",\r\n     right: \"0\",\r\n     position: \"absolute\",\r\n     transform: \"translateY(-50%)\"\r\n    }\r\n\r\n\r\n}) \r\n\r\nfunction Post(props){\r\n\r\n\r\nconst classes = useStyles()\r\n\r\n// set comments to empty array       \r\nconst [comments, setComments] = useState([]);    \r\n\r\n//set isLikeClicked state to false so like button is not shown as clicked\r\nconst[isLikeClicked, setIsLikeClicked] = useState(false);\r\n\r\n\r\nconst currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n \r\n\r\n\r\n// addComment function setsComments state to return all previous comments and latest comment\r\nfunction addComment(newComment){\r\n \r\n  \r\n  setComments(prevComments =>{\r\n   return [...prevComments, newComment ];\r\n  })\r\n\r\n  \r\n\r\n  \r\n\r\n  fetch(\"https://so-me-db.herokuapp.com/comments/\", {\r\n    method: \"POST\",\r\n    headers: {\"Content-type\": \"application/json\"},\r\n    body: JSON.stringify(newComment)\r\n  })\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// deleteComment function returns only comments \r\nfunction deleteComment(id){\r\n  console.log(id)\r\n        setComments(prevComments =>{\r\n          return prevComments.filter((commentItem, index)=> {\r\n            \r\n            return commentItem.id !== id;\r\n          })\r\n        })\r\n\r\n        props.setUsersComments(prevComments =>{\r\n          return prevComments.filter((commentItem, index)=> {\r\n            \r\n            return commentItem.id !== id;\r\n          })\r\n        })\r\n        \r\n        fetch(\"https://so-me-db.herokuapp.com/\"+id, {\r\n        method: \"DELETE\",\r\n      })\r\n        \r\n      }\r\n\r\n\r\n\r\n//set date in todayDate state\r\n\r\n\r\nconst [like, setLike] = useState(\"Like\")\r\n\r\n\r\n\r\n\r\n// function countLike(){\r\n//         setLike(like+1);        \r\n// }      \r\n      \r\n\r\n//handleClick function will call the onDelete function and take in the post id\r\nfunction handleClick(){\r\n        props.onDelete(props.id);\r\n        // setTodayDate(date);\r\n}        \r\n\r\n\r\n// change color of like icon when clicked\r\nfunction changeColor(){\r\n setIsLikeClicked(true)\r\n setLike(\"You liked this post\");\r\n\r\n}\r\n\r\n\r\nreturn(<>\r\n     \r\n        <Box className={classes.profileInfo} >\r\n         <Avatar className={classes.avatar} src={props.avatar} alt=\"\"/>\r\n         <Typography className={classes.name} variant=\"h5\">{props.posterUsername}</Typography>\r\n         </Box>\r\n        <Paper className={classes.contentBox} elevation ={12}>\r\n      { props.posterUsername === currentUser.login.username ? <TiDelete className={classes.delIcon} style={{cursor: \"pointer\", fontSize: \"40px\", color:\"#bd1604\"}} onClick={handleClick}/> : null}\r\n        <Typography variant=\"h6\">{props.title}</Typography>\r\n         <p className={classes.postContent}>{props.content}</p>\r\n         <AiFillLike style={ {color: isLikeClicked ? \"red\" : \"black\"}} size={25} onClick={changeColor}/><span>{like}</span>\r\n         <Typography className={classes.date}>{props.timestamp}</Typography>\r\n        </Paper>\r\n        \r\n\r\n\r\n{/* map though all coomments and display them */}\r\n        {comments.map((commentItem, i) => {\r\n         return (<Comment\r\n          key={commentItem.id}\r\n          id ={commentItem.id}\r\n          content={commentItem.commentContent}\r\n          commentPostedBy ={commentItem.commentPostedBy}\r\n          commentAvatar ={commentItem.commentAvatar}\r\n          commentTimestamp = {commentItem.commentTimestamp}\r\n          onDelete={deleteComment}\r\n          changeColor ={changeColor}\r\n          commentBelongsTo ={props.postId}\r\n          isLikeClicked={isLikeClicked}\r\n          like ={like}\r\n         />\r\n         );\r\n         })}\r\n\r\n        <CreateComment\r\n          onAdd={addComment}   \r\n          commentBelongsTo ={props.postId}   \r\n        />\r\n\r\n{props.usersComments.filter((commentItem)=>{\r\n  \r\n  return commentItem.commentOwner === props.postId \r\n  \r\n}).map((commentItem, i) => {\r\n         return (<Comment\r\n          key={commentItem.id}\r\n          id ={commentItem.id}\r\n          content={commentItem.commentContent}\r\n          commentPostedBy ={commentItem.commentPostedBy}\r\n          commentAvatar ={commentItem.commentAvatar}\r\n          commentTimestamp = {commentItem.commentTimestamp}\r\n          onDelete={deleteComment}\r\n          changeColor ={changeColor}\r\n          commentBelongsTo ={props.postId}\r\n          isLikeClicked={isLikeClicked}\r\n          like ={like}\r\n         />\r\n         );\r\n         })}\r\n\r\n        \r\n         \r\n        \r\n\r\n</>)\r\n\r\n}\r\n\r\nexport default Post;","import React,{useState} from \"react\";\r\nimport CreatePost from \"../components/CreatePost\"\r\nimport Post from \"../components/Post\"\r\nimport Nav from \"../components/Nav\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\nimport {Typography} from \"@material-ui/core\"\r\nimport {useParams, Link} from \"react-router-dom\"\r\n\r\nconst useStyles=makeStyles({\r\n  postsTitle : {\r\n    backgroundColor:\"aliceblue\",\r\n    padding: \"20px\",\r\n    borderRadius: \"10px\",\r\n  },\r\n  \r\n})\r\n\r\nconst PostsPage = ({ usersPosts, usersComments, setUsersPosts, setUsersComments, addPost, deletePost, posts}) =>{\r\n\r\n \r\nconst classes=useStyles();\r\nconst currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n\r\n  //set state of posts constant to an empty array\r\n\r\n   \r\n    const [postDate, setPostDate]= useState([]);\r\n    const [posterUsername, setPosterUsername]=useState(currentUser.login.username)\r\n    const [avatar, setAvatar] = useState(currentUser.picture.medium)\r\n\r\n   \r\n\r\n    // addPost function sets the state of posts to return previous submitted posts and the latest post\r\n\r\n    // function addPost(newPost){\r\n\r\n      \r\n  \r\n    //   setPosts(prevPosts =>{\r\n    //    return [newPost, ...prevPosts ]\r\n    //   })\r\n        \r\n    //   fetch(\"http://localhost:8000/posts/\", {\r\n    //     method: \"POST\",\r\n    //     headers: {\"Content-type\": \"application/json\"},\r\n    //     body: JSON.stringify(newPost)\r\n    //   })\r\n\r\n\r\n\r\n    // }\r\n    \r\n    // deletePost function sets the state of posts to return filtered items in the array where the id is not equal to index. \r\n\r\n    // function deletePost(id){\r\n      \r\n    //   setPosts(prevPosts =>{\r\n    //     return prevPosts.filter((postItem)=> {\r\n    //       return postItem.id !== id;\r\n    //     })\r\n    //   })\r\n\r\n    //   setUsersPosts(prevPosts =>{\r\n    //     return prevPosts.filter((postItem)=> {\r\n    //       return postItem.id !== id;\r\n    //     })\r\n    //   })\r\n\r\n    //   fetch(\"http://localhost:8000/posts/\"+id, {\r\n    //     method: \"DELETE\",\r\n    //   })\r\n    \r\n    // }\r\n\r\n    let {postId} = useParams();\r\n    console.log(postId)\r\n  \r\n\r\n    return(\r\n    <div>\r\n   <Nav/>\r\n     \r\n      <div className=\"main-page\">\r\n     \r\n      \r\n      \r\n      <div className=\"posts-container\">\r\n      <div className=\"posts-heading-container\">\r\n      <Typography className={classes.postsTitle} variant=\"h3\">Posts</Typography>\r\n    \r\n \r\n     \r\n      </div>\r\n      \r\n    {postId === undefined ? <CreatePost \r\n        onAdd ={addPost}\r\n        posterUsername ={posterUsername}\r\n        avatar={avatar}\r\n        /> : null }\r\n\r\n\r\n        {/* Map through the posts array and display each post in it*/}\r\n\r\n      {posts.filter(postItem=>{\r\n         if(postId===postItem.id){\r\n            return postItem ;\r\n         } else if(postId === undefined){\r\n           return postItem;\r\n         }\r\n        }).map((postItem, index) => {\r\n         return (\r\n          \r\n          <Post\r\n         key={postItem.id}\r\n          id ={postItem.id}\r\n          postId ={postItem.id}\r\n          title={postItem.title}\r\n          content={postItem.content}\r\n          posterUsername ={postItem.posterUsername}\r\n          avatar={postItem.avatar}\r\n          timestamp = {postItem.timestamp}\r\n          onDelete={deletePost}\r\n          postDate ={postDate}\r\n          usersComments ={usersComments}\r\n          setUsersComments ={setUsersComments}\r\n          \r\n         \r\n         />\r\n         );\r\n         })}\r\n\r\n         {usersPosts.filter(userPost =>{\r\n          if(postId===userPost.id){\r\n          return userPost\r\n          }else if(postId === undefined){\r\n            return userPost;\r\n          }\r\n         }).map((postItem, index) => {\r\n         return (<Post\r\n         key={postItem.id}\r\n          id ={postItem.id}\r\n          postId ={postItem.id}\r\n          title={postItem.title}\r\n          content={postItem.content}\r\n          posterUsername ={postItem.posterUsername}\r\n          avatar={postItem.avatar}\r\n          timestamp = {postItem.timestamp}\r\n          onDelete={deletePost}\r\n          postDate ={postDate}\r\n          usersComments ={usersComments}\r\n          setUsersComments ={setUsersComments}\r\n         />\r\n         );\r\n         })}\r\n\r\n       \r\n\r\n         \r\n         </div>\r\n    </div>\r\n\r\n    </div>\r\n      \r\n        \r\n\r\n    )\r\n}\r\n\r\nexport default PostsPage;","export default __webpack_public_path__ + \"static/media/login-img.2771cd15.jpg\";","export default __webpack_public_path__ + \"static/media/skulls.3080855b.png\";","import React from 'react';\r\n\r\nconst Test = () => {\r\n    return (\r\n        <div>\r\n            <h1>Test page</h1>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Test;","import React, {useState} from \"react\";\r\nimport {Grid, Tabs, Tab, Box, Paper, Input, Button, Typography} from \"@material-ui/core\"\r\nimport { makeStyles, createTheme, ThemeProvider } from '@material-ui/core/styles';\r\nimport image from '../images/login-img.jpg'; // Import using relative path\r\nimport skulls from \"../images/skulls.png\"\r\nimport { useHistory} from \"react-router-dom\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    image1:{\r\n        backgroundImage: `url(${image})`,\r\n        backgroundPosition: 'bottom', \r\n        backgroundSize: 'cover', \r\n        backgroundRepeat: 'no-repeat',\r\n        height: '100vh',\r\n        width: \"100%\",\r\n        position: \"relative\",\r\n        opacity: \"0.8\"\r\n       \r\n        \r\n    },\r\n\r\n    input:{\r\n        borderRadius:\"10px\",\r\n        fontSize: \"25px\",\r\n        padding: \"20px\"\r\n    },\r\n\r\n    loginPaper:{\r\n        padding: \"25px\",\r\n        maxWidth: \"350px\",\r\n        margin: \"auto\",  \r\n        alignItems: \"center\", \r\n        marginTop:\"25px\",\r\n        backgroundColor: \"aliceblue\"     \r\n    },\r\n\r\n    btn:{\r\n        fontSize: \"20px\",\r\n        margin: \"25px\",\r\n        backgroundColor: \"dodgerblue\"\r\n    },\r\n\r\n    subtitle:{\r\n        fontFamily: ['Roboto','sans-serif'].join(),\r\n        fontSize: \"20px\",\r\n        margin: \"25px\"\r\n    },\r\n\r\n    grid:{\r\n        alignSelf:\"center\"\r\n    },\r\n\r\n    overlay:{\r\n        position: \"absolute\",\r\n        top: \"0\",\r\n        left: \"0\",\r\n        backgroundImage: `url(${skulls})`,\r\n        width: \"100%\",\r\n        height: \"100%\",\r\n        zIndex: \"20\",\r\n        backgroundRepeat: 'repeat',\r\n        backgroundColor: \"#008c8c\",\r\n        mixBlendMode: \"color-burn\"\r\n    },\r\n\r\n    imgText:{\r\n        color: \"white\",\r\n        fontSize: \"40px\",      \r\n        padding: \"20px\",\r\n        backgroundColor: \"dodgerblue\",\r\n        borderRadius: \"10px\",\r\n        maxWidth: \"300px\",\r\n       \r\n    },\r\n\r\n    imgTextMiddle:{\r\n        fontSize: \"40px\", \r\n        color: \"white\",\r\n        maxWidth: \"500px\",\r\n        fontFamily:[\r\n            \"Roboto\",\r\n            \"sans-serif\"\r\n        ].join(\",\"),\r\n       marginTop: \"25px\"\r\n    },\r\n\r\n    imgTextLower:{\r\n        fontSize: \"40px\", \r\n        color: \"white\",\r\n        bottom: \"5%\",\r\n        maxWidth: \"500px\",\r\n        margin:\"auto\",\r\n        fontFamily:[\r\n            \"Pacifico\",\r\n            \"sans-serif\"\r\n        ].join(\",\"),\r\n        borderRadius: \"10px\",\r\n        width: \"100%\"\r\n       \r\n    },\r\n\r\n    sloganContainer:{\r\n        position: \"absolute\",\r\n        top: \"5%\",\r\n        zIndex: \"30\",\r\n        width:\"100%\",\r\n       margin: \"auto\"\r\n    }\r\n\r\n\r\n\r\n})\r\n\r\nconst LoginPage = ({friendsList, getCurrentUser}) =>{\r\n\r\nlet history = useHistory();\r\n\r\nconst [creds, setCreds] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n})\r\n\r\nconst [error, setError] = useState(false)\r\n\r\n\r\nconst handleCreds = (e) =>{\r\nconst {name, value} = e.target\r\nsetCreds (prevCreds =>{\r\n    return {\r\n        ...prevCreds,\r\n        [name]: value\r\n    }\r\n})\r\n}\r\n\r\nconst handleSubmit=(e)=>{\r\n\r\ne.preventDefault();\r\n\r\n\r\n\r\nfriendsList.filter(friend => {\r\n    if(friend.login.username === creds.username && friend.login.password === creds.password){\r\n        localStorage.setItem(\"myuser\", JSON.stringify(friend));\r\n        history.push(\"/friends\")\r\n    } else{\r\n        setError(true);\r\n    }\r\n})\r\n\r\n}\r\n\r\nconst classes = useStyles();\r\n\r\n\r\n    return(\r\n        \r\n      \r\n        \r\n        <Grid container >\r\n        <Grid item xs={12} sm={6}>\r\n      <div id=\"image-holder\" className={classes.image1}>\r\n        <div id=\"overlay\" className={classes.overlay}>\r\n            \r\n        </div>\r\n        <div id=\"slogan\" className={classes.sloganContainer}>\r\n        <Typography className={classes.imgText}>Social media</Typography>\r\n        <Typography className={classes.imgTextMiddle}>...that's free from ads</Typography>\r\n        <Typography className={classes.imgTextLower}>and much more personal!</Typography>\r\n        </div>\r\n      </div>\r\n       \r\n      \r\n    \r\n        \r\n        </Grid>\r\n        <Grid item xs={12} sm={6} className={classes.grid}>\r\n        \r\n         <Paper className={classes.loginPaper} >\r\n         <Typography variant=\"h1\">So-Me</Typography>\r\n            <Typography className={classes.subtitle} variant=\"subtitle1\">Connect with your friends without anything getting in your way!</Typography>\r\n            {error ? <Typography variant =\"subtitle1\">Incorrect username and/or password</Typography> : null}\r\n            <form action=\"\">\r\n            <Input className={classes.input} fullWidth placeholder=\"Username\" onChange={handleCreds} name=\"username\" value={creds.username}/>\r\n            <Input type=\"password\" className={classes.input} fullWidth placeholder=\"Password\" onChange={handleCreds} name=\"password\" value ={creds.password}/>\r\n           <Button type=\"submit\" className={classes.btn} size=\"large\" variant=\"contained\" color=\"primary\" onClick={handleSubmit}>Sign In</Button>\r\n           </form>\r\n       \r\n         </Paper>\r\n        </Grid>\r\n      \r\n       \r\n      </Grid>\r\n\r\n      \r\n   \r\n    )\r\n}\r\n\r\nexport default LoginPage;","import React, { useState }from 'react';\r\nimport { Typography, Button, Box, Paper, TextField } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { Link } from \"react-router-dom\"\r\nimport skulls from \"../images/skulls.png\"\r\nimport Nav from \"../components/Nav\"\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    btn: {\r\n        fontSize : 15,\r\n        backgroundColor: \"violet\",\r\n        borderRadius: 20,\r\n        padding: 10,\r\n        color: \"white\",\r\n        margin: 25\r\n    },\r\n    box: {\r\n        backgroundColor: \"white\",\r\n        padding: 10,\r\n        borderRadius: 20,\r\n        maxWidth:200,\r\n        margin: \"auto\",\r\n        paddingTop: 25,\r\n        height: \"100%\",\r\n    },\r\n    profilePic:{\r\n        borderRadius: 20,\r\n    },\r\n    grid:{\r\n        padding: 50\r\n    },\r\n    name:{\r\n        padding: 10\r\n    },\r\n    email:{\r\n        overflowWrap: \"break-word\",\r\n        padding: 10,\r\n        fontFamily: ['Roboto','sans-serif'].join(),\r\n    },\r\n    bg:{\r\n        // backgroundImage: `url(${skulls})`,\r\n        // backgroundRepeat: \"repeat\",\r\n        // backgroundColor: \"aliceblue\"\r\n    }\r\n})\r\n\r\n\r\n\r\nconst Friends = ({friendsList}) => {\r\n\r\n    const currentUser = JSON.parse(localStorage.getItem(\"myuser\"));\r\n\r\n  const classes = useStyles();\r\n    const [searchQuery, setSearchQuery] = useState(\"\")\r\n    const handleClick = () =>{\r\n        \r\n    }\r\n\r\n\r\n\r\n   const handleSearch = (e) =>{\r\n        const searchTerm = e.target.value;\r\n    \r\n            setSearchQuery(searchTerm);     \r\n   }  \r\n\r\n \r\n\r\n    return (\r\n        <>\r\n        <Nav/>\r\n        <div className={classes.bg}>\r\n        <Typography variant=\"h2\">Friends</Typography>\r\n        <TextField onChange={handleSearch} placeholder=\"Search for a friend\"/>\r\n <Grid container spacing={3} alignItems=\"center\" className={classes.grid} >\r\n    \r\n\r\n\r\n        {friendsList.filter(val =>{\r\n            if(searchQuery==\"\"){\r\n                return val;\r\n            } else if(val.name.first.toLowerCase().includes(searchQuery.toLowerCase())){\r\n                return val;\r\n            }\r\n        }).map((friend, i)=>{\r\n            if(friend.login.username != currentUser.login.username)\r\n            return(\r\n                <Grid  key={i} id={i}  item xs={6}  md={6} lg={4}> \r\n                    \r\n                <Link style={{ textDecoration: 'none' }} to={`/friends/${friend.login.username}`}>  \r\n                <Paper className={classes.box}>\r\n                <img className={classes.profilePic} src={friend.picture.large} alt=\"\" />\r\n               <Typography className={classes.name} variant=\"h4\" component=\"h4\"> {friend.name.first + \" \" + friend.name.last}</Typography>\r\n               <Typography variant=\"body1\" className={classes.email}>{friend.email}</Typography>\r\n                </Paper>\r\n                </Link>\r\n                </Grid>\r\n               \r\n               \r\n            )\r\n        })}\r\n           \r\n        </Grid>\r\n        <Button className ={classes.btn} onClick={handleClick}>Load more...</Button>\r\n           \r\n        </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Friends;\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {useParams, Link} from \"react-router-dom\"\r\nimport {Paper, Tabs, Tab, Box, Typography, Grid} from \"@material-ui/core\"\r\nimport PostsPage from \"../components/PostsPage\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    \r\n        tabs:{\r\n            backgroundColor: \"white\",\r\n            color: \"green\",\r\n            margin: \"auto\",\r\n            \r\n        },\r\n        tab:{\r\n            margin:\"auto\",\r\n            fontSize: \"15px\",\r\n            fontWeight: \"bold\"\r\n        },\r\n        paper:{\r\n            width: \"500px\",\r\n            margin:\"auto\",\r\n          \r\n         \r\n        },\r\n        img:{\r\n            borderRadius: \"25%\"\r\n        }\r\n\r\n\r\n    \r\n});\r\n\r\nconst Wall = ({friendsList, usersPosts, usersPhotos, usersComments, setUsersPosts, setUsersComments}) => {\r\n\r\n\r\n   \r\n\r\nlet {username} = useParams();\r\n\r\n\r\nconst randomId =uuidv4()\r\n\r\nconst classes = useStyles();\r\n\r\n\r\nconst [value, setValue] = useState('one');\r\nconst [wallOwner, setWallOwner] = useState(username) \r\n\r\nconst handleChange = (event, newValue) => {\r\n  setValue(newValue);\r\n\r\n};\r\n\r\n\r\n    return (\r\n        <div>\r\n            \r\n\r\n\r\n            \r\n            <Typography variant=\"h2\">Wall</Typography>\r\n            {    friendsList.filter(friend =>{\r\n                if(friend.login.username === username)\r\n                return friend;\r\n            }).map((friendDetails, i)=>{\r\n                const code = friendDetails.nat;\r\n                const uri = \"https://www.countryflags.io/\";\r\n                const uriEnd = \"/flat/64.png\";\r\n                const fullUri = uri + code + uriEnd\r\n\r\n            \r\n\r\n                return(\r\n\r\n                    \r\n                    \r\n                  \r\n                    <Paper key={randomId} id={randomId} className={classes.paper}><Typography variant=\"h3\">{friendDetails.name.first + \" \" + friendDetails.name.last} </Typography>\r\n                    <Grid container>\r\n                    <Grid item xs={6}>\r\n                    <Box>\r\n                    <Typography variant=\"h6\">{friendDetails.login.username} </Typography>\r\n                    <img className={classes.img} src={friendDetails.picture.large} alt=\"\" />\r\n                    </Box>\r\n                    </Grid>\r\n                   \r\n                    <Grid item xs={6}>\r\n                    <Typography>{friendDetails.location.state + \", \" +friendDetails.location.country}</Typography>\r\n                    <img  src={fullUri} alt=\"\" />\r\n                    </Grid>\r\n                    </Grid>\r\n                    <Box sx={{ width: '100%' }}>\r\n                  \r\n                    <Tabs\r\n                        value={value}\r\n                        onChange={handleChange}\r\n                        textColor=\"primary\"\r\n                        indicatorColor=\"primary\"\r\n                        aria-label=\"profile-tabs\"\r\n                        className={classes.tabs}\r\n                        \r\n                    >\r\n                        <Tab className={classes.tab} value=\"one\" label=\"Posts\"/>\r\n\r\n                       \r\n                        <Tab className={classes.tab} value=\"two\" label=\"Photos\" />\r\n                       \r\n                        <Tab className={classes.tab} value=\"three\" label=\"Friends\" />\r\n                      \r\n                    </Tabs>\r\n                        { value ===\"one\" ? usersPosts.filter(userPost =>{\r\n                            if(userPost.posterUsername === username){\r\n                            return userPost;\r\n                            }\r\n                        }).map(userPost=>{\r\n                            return(\r\n                               <Link key={userPost.id} id={userPost.id} to={`/posts/${userPost.id}`} style={{textDecoration:\"none\"}}> <Typography  variant=\"h6\" >{userPost.title}</Typography></Link>\r\n                            )\r\n                        }) : null}\r\n\r\n                        { value ===\"two\" ? usersPhotos.filter((userPhoto)=>{\r\n                            console.log(userPhoto.photoUploader);\r\n                            if(userPhoto.photoUploader === username){\r\n                                return userPhoto;\r\n                            }\r\n                        }).map(userPhoto=>{\r\n                            return(\r\n                                <Box style={{display: \"flex\"}}>\r\n                                \r\n                               <img style={{width: \"100%\"}} src={userPhoto.imageURL} alt=\"\" />\r\n                              \r\n                               </Box>\r\n                            )\r\n                        }) : null}\r\n\r\n                        \r\n                    \r\n                  \r\n                    </Box>\r\n                   </Paper>\r\n\r\n            \r\n\r\n                )\r\n            })}\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Wall;","import React from 'react';\r\nimport {Paper, Box, Typography} from \"@material-ui/core\"\r\nimport {makeStyles} from \"@material-ui/core/styles\"\r\n\r\nconst useStyles = makeStyles({\r\n    logoutBox:{\r\n        width: \"400px\",\r\n        position: \"absolute\",\r\n        top: \"30%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\",\r\n        padding: \"25px\"\r\n    },\r\n\r\n})\r\n\r\nconst LogoutPage = () => {\r\n\r\n    localStorage.clear();\r\n\r\n    var timer = setTimeout(function() {\r\n        window.location='http://localhost:3000/'\r\n    }, 3000);\r\n\r\nconst classes = useStyles();\r\n    return (\r\n        <div>\r\n            <Paper className={classes.logoutBox} elevation={12}>\r\n            <Typography variant=\"h1\">So-Me</Typography>\r\n            <Box sx={{ border: \"3px dodgerblue solid\", p:2, borderRadius: \"10px\" }}>\r\n                <Typography variant=\"h5\">You are now logged out</Typography>\r\n                <Typography variant=\"h6\">Redirecting....</Typography>\r\n            </Box>\r\n            </Paper>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LogoutPage;","import React, {useState, useEffect} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from \"react-router-dom\";\nimport Photos from \"./components/Photos\"\nimport PostsPage from \"./components/PostsPage\";\nimport LoginPage from \"./components/LoginPage\";\nimport Friends from \"./components/Friends\"\nimport Wall from \"./components/Wall\";\nimport SinglePost from \"./components/SinglePost\"\nimport LogoutPage from \"./components/LogoutPage\"\nimport Test from \"./components/Test\"\nimport './App.css';\nimport axios from 'axios';\nimport { createTheme, ThemeProvider } from '@material-ui/core/styles';\n\n\n\n\nconst theme = createTheme({\n \n  typography: {\n    fontFamily: [\n      'Fredoka One', \n      \"cursive\"\n    ].join(\",\")\n  },\n\n  body1:{\n    fontFamily: ['Roboto','sans-serif'].join(),\n  }\n})\n\nfunction App() {\n\n\n\n  const [friendsList, setFriendsList] = useState([])\n  const [usersPosts, setUsersPosts] = useState([])\n  const [usersComments, setUsersComments] = useState([])\n  const [usersPhotos, setUsersPhotos] = useState([])\n  const [posts, setPosts] = useState([]);\n  const [photos, setPhotos] = useState([])\n\n  function addPost(newPost){\n    setPosts(prevPosts =>{\n     return [newPost, ...prevPosts ]\n    })\n    fetch(\"https://so-me-db.herokuapp.com/posts\", {\n      method: \"POST\",\n      headers: {\"Content-type\": \"application/json\"},\n      body: JSON.stringify(newPost)\n    })\n  }\n\n  function addPhoto(newPhoto){\n    setPhotos((prevItems)=>{\n      return [...prevItems, newPhoto];\n    });\n    fetch(\"https://so-me-db.herokuapp.com/photos\", {\n      method: \"POST\",\n      headers: {\"Content-type\": \"application/json\"},\n      body: JSON.stringify(newPhoto)\n    })\n  }\n\n   function deletePost(id){\n      \n      setPosts(prevPosts =>{\n        return prevPosts.filter((postItem)=> {\n          return postItem.id !== id;\n        })\n      })\n\n      setUsersPosts(prevPosts =>{\n        return prevPosts.filter((postItem)=> {\n          return postItem.id !== id;\n        })\n      })\n\n      fetch(\"https://so-me-db.herokuapp.com/posts\"+id, {\n        method: \"DELETE\",\n      })\n    \n    }\n\n\n  const fetchData = () =>{\n    const usersAPI = \"https://so-me-db.herokuapp.com/users\"\n    const postsAPI = \"https://so-me-db.herokuapp.com/posts\"\n    const commentsAPI = \"https://so-me-db.herokuapp.com/comments\"\n    const photosAPI = \"https://so-me-db.herokuapp.com/photos\"\n\n    const getUsers = axios.get(usersAPI)\n    const getPosts = axios.get(postsAPI);\n    const getComments = axios.get(commentsAPI);\n    const getPhotos = axios.get(photosAPI)\n\naxios.all([getUsers, getPosts, getComments, getPhotos]).then(\n  axios.spread((...allData)=>{\n    const allDataUsers = allData[0];\n    const allDataPosts= allData[1];\n    const allDataComments= allData[2];\n    const allDataPhotos = allData[3];\n\n\n    \n\n    setFriendsList(allDataUsers.data.reverse());\n    setUsersPosts(allDataPosts.data.reverse());\n    setUsersComments(allDataComments.data);\n    setUsersPhotos(allDataPhotos.data.reverse());\n    \n\n  })\n)\n}\n\n\n  useEffect(() => {\n    fetchData()\n  },[])\n\n  \n\n\n  return (<>\n  <ThemeProvider theme={theme}>\n   <Router>\n    <Switch>\n    <Route exact path='/so-me/' component={Test} />\n    {/* <Route path=\"/\" exact render={() => <LoginPage friendsList={friendsList} />}/>\n    <Route path=\"/posts\" exact render={() => <PostsPage usersPosts={usersPosts} posts={posts} usersComments={usersComments} setUsersPosts={setUsersPosts} setUsersComments={setUsersComments} addPost={addPost} deletePost={deletePost} />}/>\n    <Route path=\"/friends\" exact render={() => <Friends  friendsList={friendsList} />}/>\n    <Route path=\"/photos\" render={() => <Photos addPhoto={addPhoto} photos={photos} usersPhotos={usersPhotos}/>}/>\n    <Route path=\"/posts/:postId\"  render={() => <PostsPage usersPosts={usersPosts} posts={posts} usersComments={usersComments} setUsersPosts={setUsersPosts} setUsersComments={setUsersComments} addPost={addPost} deletePost={deletePost} />}/>\n    <Route path=\"/friends/:username\" render={() => <Wall friendsList={friendsList} usersPosts={usersPosts} usersPhotos={usersPhotos} usersComments={usersComments} setUsersPosts={setUsersPosts} setUsersComments={setUsersComments}  />}/>\n    <Route path=\"/logout\" render={() => <LogoutPage/>}/> */}\n    </Switch>\n    \n    </Router> \n    </ThemeProvider>\n  </>);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}